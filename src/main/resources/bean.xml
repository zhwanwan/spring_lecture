<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <!--<bean id="accountDao" class="com.lec.dao.impl.AccountDaoImpl"></bean>-->

    <!-- spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->

    <!--创建bean的三种方式：
        1.使用默认构造函数创建；
            在Spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。
            采用的是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则创建失败。
        2.使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）
        3.使用静态工厂中的静态方法创建对象（使用某个类中静态方法创建对象，并存入spring容器）
    -->

    <!-- bean的作用范围调整：
    bean标签的scope属性：
    作用：用于指定bean的作用范围
    取值：常用的就是单例或多例
        singleton：单例的（默认值）
        prototype：多例的
        request：作用于web应用的请求范围
        session：作用于web应用的会话范围
        global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session
    -->
    <!-- 1.使用默认构造函数创建；-->
    <!--<bean id="accountService" class="com.lec.service.impl.AccountServiceImpl" init-method="init"
          destroy-method="destroy" scope="singleton"></bean>-->
    <!-- 2.使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）-->
    <!--<bean id="instanceFactory" class="com.lec.factory.InstanceFactory"></bean>
    <bean id="actSvcIns" factory-bean="instanceFactory" factory-method="getAccountService"></bean>-->
    <!-- 3.使用静态工厂中的静态方法创建对象（使用某个类中静态方法创建对象，并存入spring容器）-->
    <!--<bean id="acctSvcStatic" class="com.lec.factory.StaticFactory" factory-method="getAccountService"
          scope="prototype"></bean>-->

    <!-- bean对象的生命周期
        单例对象
            出生：当容器创建时对象出生
            活着：只要容器还在，对象一直在
            死亡：容器销毁，对象消亡
        多例对象
            出生：当使用对象时，spring才为我们创建
            活着：使用过程中一直活着
            死亡：当对象长时间不用且没有别的对象引用时，由垃圾回收器回收
     -->
    <!-- Spring中的依赖注入
        依赖注入：
            Dependency Injection
        IOC的作用：
            降低程序间的耦合（依赖关系）
        依赖关系的管理：
            以后都交给spring来维护
        在当前类需要用到其他类的时候，由spring为我们提供，我们只需要在配置文件中说明
        依赖关系的维护：
            就称之为依赖注入。
        依赖注入：
            能注入的数据，分三类：
                1.基本类型和String类型
                2.其他bean类型（在配置文件中或者注解配置过得bean）
                3.复杂类型、集合类型
            注入的方式，分三种：
                1.使用构造函数提供
                2.使用set方法提供
                3.使用注解提供
    -->
    <!-- 依赖注入：构造函数注入
        使用的标签：constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性
            type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引位置从0开始
            name：用于指定给构造函数中指定名称的参数赋值
            =============以上三个用于指定给构造函数中哪个参数赋值===============
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他的bean类型数据，在spring的IOC核心容器中出现过得bean对象
        优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建
        弊端：
            改变了bean对象的实例化方式，使我们在创建对象时，即使用不到的数据也需要提供
     -->
    <!--<bean id="accountService" class="com.lec.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="Spring学习"></constructor-arg>
        <constructor-arg name="age" value="20"></constructor-arg>
        <constructor-arg name="birthday" type="java.util.Date" ref="now"></constructor-arg>
    </bean>-->

    <!--<bean id="now" class="java.util.Date"></bean>-->

    <!-- 依赖注入：set方法注入[比构造函数常用]
        涉及的标签：property
        标签位置：bean标签内部
        标签属性：
            name: 用于指定注入时所调用的set方法名称
            value: 用于提供基本类型和String类型的数据
            ref: 用于指定其他的bean类型数据，在spring的IOC核心容器中出现过得bean对象
        优势：
            创建对象时没有明确的限制，可以直接使用默认构造函数
         弊端：
            如果有某个函数必须有值，则获取对象时有可能set方法没有执行
    -->
    <!--<bean id="accountService" class="com.lec.service.impl.AccountServiceImpl">
        <property name="name" value="Spring学习"></property>
        <property name="age" value="21"></property>
        <property name="birthday" ref="now"></property>
    </bean>-->

    <!-- 复杂类型的注入、结合类型的注入
        用于给List结构集合注入的标签：
            list、array、set
        用于给Map结构集合注入的标签：
            map、props
        结构相同，标签可以互换
    -->
    <!--<bean id="accountService2" class="com.lec.service.impl.AccountServiceImpl2">
        <property name="myStrs">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>111</value>
                <value>222</value>
                <value>333</value>
            </list>
        </property>
        <property name="mySet">
            <set>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="KA" value="VAAA"></entry>
                <entry key="KB">
                    <value>VBBB</value>
                </entry>
                <entry key="KC" value="VCCC"></entry>
            </map>
        </property>
        <property name="myPros">
            <props>
                <prop key="PA">PAAA</prop>
                <prop key="PB">PBBB</prop>
                <prop key="PC">PCCC</prop>
            </props>
        </property>
    </bean>-->


    <!-- 通过注解注入：
        ☆需要告知spring在创建容器时要扫描的包，配置所需要的标签不是在beans的约束中，而是一个名词为context名词空间和约束中
    -->
    <context:component-scan base-package="com.lec.*.impl"></context:component-scan>

    <!-- 配置Service -->
    <bean id="accountService" class="com.lec.ioc.service.impl.AccountServiceImpl">
        <!-- 注入Dao -->
        <property name="accountDao" ref="accountDao"></property>
    </bean>
    <!-- 配置Dao对象 -->
    <bean id="accountDao" class="com.lec.ioc.dao.impl.AccountDaoImpl">
        <!-- 注入Runner -->
        <property name="runner" ref="runner"></property>
    </bean>
    <!-- 配置QueryRunner对象 -->
    <bean id="runner" class="org.apache.commons.dbutils.QueryRunner" scope="prototype">
        <!-- 注入数据源 -->
        <constructor-arg name="ds" ref="datasource"></constructor-arg>

    </bean>
    <!-- 配置数据源对象 -->
    <bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 注入连接数据库的必备信息 -->
        <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/sampdb"></property>
        <property name="user" value="root"></property>
        <property name="password" value="root"></property>
     </bean>
    <!--  -->
    <!--  -->

</beans>