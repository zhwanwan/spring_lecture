<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 配置spring的IOC,把Service对象配置进来 -->
    <!--<bean id="accountService" class="com.lec.aop.service.impl.AccountServiceImpl"></bean>-->

    <!-- spring中基于XML的AOP配置
        1.把通知的bean也交给spring来管理
            配置logger对象
        2.使用aop:config标签表明开始AOP的配置
        3.使用aop:aspect标签表明配置切面
            属性：
                id:切面的唯一标识
                ref:指定通知类的bean标识
        4.在aop:aspect标签的内部使用对应的标签来配置通知的类型
            本例中是让printLog方法在切入点方法执行之前执行，是一个前置通知
            属性：
                method：指定Logger类中哪个方法是前置通知
                pointcut：指定切入点表达式，表达式含义指的是对业务层中哪些方法增强
            切入点表达式的写法:
                关键字：execution(表达式)
                表达式:
                    访问修饰符 返回值 包名.包名...类名.方法名(参数列表)
                 标准写法：
                    public void com.lec.aop.service.impl.AccountServiceImpl.saveAccount()
                 访问修饰符可以省略：
                    void com.lec.aop.service.impl.AccountServiceImpl.saveAccount()
                 返回值可以用通配符，表示任意返回值：
                    * com.lec.aop.service.impl.AccountServiceImpl.saveAccount()
                 包名可以使用通配符表示任意包，但是有几级包就需写几个*：
                 包名可以使用..表示当前包及其子包：
                    * *..AccountServiceImpl.saveAccount()
                 类名和方法名都可以使用通配符：
                    * *..*.*()
                 参数列表：
                    可以直接写数据类型：
                        基本类型直接写名称，如int；
                        引用类型写包名.类名的方式，如java.lang.String;
                    可以使用通配符表示任意类型，但是必须有参数
                    可以使用..表示有无参数均可， 有参数可以是任意类型
                 全通配写法：* *..*.*(..)


                 实际开发中切入点表达式的通常写法：
                    切到业务能实现类下的所有方法
                        * com.xxx.service.impl.*.*(..)


    -->

    <!-- 配置logger对象 -->
    <!--<bean id="logger" class="com.lec.utils.Logger"></bean>-->

    <!-- 配置AOP -->
    <!--<aop:config>
        &lt;!&ndash; 配置切面并且建立通知方法和切入点方法的关联 &ndash;&gt;
        <aop:aspect id="logAdvice" ref="logger">

            <aop:pointcut id="pt1" expression="execution(* com.lec.aop.service.impl.*.*(..))"/>

            &lt;!&ndash;<aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"></aop:after-returning>
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>
            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>&ndash;&gt;
            &lt;!&ndash; 配置切入点表达式：
                标签：aop:pointcut
                    属性：
                        id:指定表达式的唯一标识；
                        expression：指定表达式内容
                此标签写在aop:aspect标签内部只能当前切面使用
                它还可以写在aop:aspect标签外部，此时所有切面都可以使用；如果写在aop:aspect标签外部，那么它要定义在所有通知方法的前面
            &ndash;&gt;
            &lt;!&ndash; 配置环绕通知 &ndash;&gt;
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config>-->

    <!-- 以下是基于注解的AOP配置 -->
    <!-- 配置spring创建容器时要扫描的包 -->
    <context:component-scan base-package="com.lec.aop"></context:component-scan>
    <context:component-scan base-package="com.lec.utils"></context:component-scan>

    <!-- 配置spring开启注解AOP的支持 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>




</beans>